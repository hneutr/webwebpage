[
    "from webweb.webweb import webweb\n",
    "\n",
    "# Instantiate webweb object\n",
    "web = webweb()\n",
    "\n",
    "# number of nodes\n",
    "N = 6\n",
    "\n",
    "# set the gravity\n",
    "web.display.g = 0.3\n",
    "\n",
    "# Give the file a name\n",
    "web.display.name = 'Advanced'\n",
    "\n",
    "# links will be 20 pixels long\n",
    "web.display.l = 20\n",
    "\n",
    "# nodes will have a charge of 200\n",
    "web.display.c = 200\n",
    "\n",
    "# display the `snake` network first\n",
    "web.display.networkName = 'snake'\n",
    "\n",
    "# we'll compute node color by the `hunger` attribute\n",
    "web.display.colorBy = 'hunger'\n",
    "\n",
    "# we'll compute node size by the `isHead` attribute\n",
    "web.display.sizeBy = 'isHead'\n",
    "\n",
    "# set the default color palette for non-scalars\n",
    "web.display.colorPalette = \"Set2\"\n",
    "\n",
    "# we'll invert the sizing of isHead (false will be big, true will be small)\n",
    "# if colorBy was a binary label, we could also set web.display.inverBinaryColors to True.\n",
    "web.display.invertBinarySizes = True\n",
    "\n",
    "# Build a few networks\n",
    "web.networks.snake.add_layer(\n",
    "    # the adjacency\n",
    "    [[i + 1, i+2] for i in range(N-1)],\n",
    "    # the labels\n",
    "    {\n",
    "        'isHead' : {\n",
    "            # the length of this array should equal the number of nodes\n",
    "            'value' : [ False, False, False, False, False, True ],\n",
    "        },\n",
    "        'slithering' : {\n",
    "            # type can be 'scalar', 'binary', or 'categorical'\n",
    "            # if you use True/False, webweb will know it's binary\n",
    "            # if you use strings for categories, webweb will know it's\n",
    "            # categorical\n",
    "            'type' : 'categorical',\n",
    "            'value' : [1,2,2,3,1,2],\n",
    "        }\n",
    "    }\n",
    ")\n",
    "\n",
    "web.networks.starfish.add_layer(\n",
    "    [[0, i+1] for i in range(N-1)],\n",
    "    {\n",
    "        'texture' : {\n",
    "            # we don't have to put a type since the values are strings\n",
    "            'value' : ['gooey', 'fishy', 'chewy','crunchy', 'chewy', 'gooey'],\n",
    "        },\n",
    "        'power' : {\n",
    "            # we don't have to put a type since scalar is the default\n",
    "            'value' : [1,3,3.8,0.2,1,3.1415],\n",
    "        }\n",
    "    }\n",
    ")\n",
    "\n",
    "# Name the nodes\n",
    "web.display.nodeNames = ['dane', 'sebastian', 'manny', 'brock', 'ted', 'donnie']\n",
    "\n",
    "# add some top-level scalar labels. \n",
    "# these will be shared by both of our networks\n",
    "# (nodes in both our snake network and our starfish network will have an\n",
    "# attribute 'hungry')\n",
    "web.display.labels.hunger.type = 'scalar'\n",
    "web.display.labels.hunger.value = [4,9,2,4,12.1,5]\n",
    "\n",
    "web.networks.small_snake.add_layer(\n",
    "    [[i, i+1] for i in range(N-3)],\n",
    "    # this snake has only 4 nodes\n",
    "    nodes=4,\n",
    ")\n",
    "\n",
    "web.draw()"
]
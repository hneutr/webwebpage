[
    "from webweb import Web\n",
    "import networkx as nx\n",
    "\n",
    "# webweb'll display a metadata attribute as binary if every node's value for\n",
    "# that attribute is either True or False.\n",
    "G = nx.Graph()\n",
    "G.add_edges_from([['Dan', 'Hunter'], ['Brian', 'Hunter'], ['Carl', 'Hunter'], ['Carl', 'Brian']])\n",
    "\n",
    "G.nodes['Dan']['wearsGlasses'] = True\n",
    "G.nodes['Hunter']['wearsGlasses'] = True\n",
    "G.nodes['Brian']['wearsGlasses'] = True\n",
    "G.nodes['Carl']['wearsGlasses'] = False\n",
    "\n",
    "# `True` values will be \"big\" and `False` values small, but if we wanted the\n",
    "# opposite, we could do the following:\n",
    "# web.display.invertBinarySizes = True\n",
    "\n",
    "# create the web\n",
    "web = Web(nx_G=G)\n",
    "\n",
    "# use the 'wearsGlasses' to compute node sizes\n",
    "web.display.sizeBy = 'wearsGlasses'\n",
    "\n",
    "# show the visualization\n",
    "web.show()"
]
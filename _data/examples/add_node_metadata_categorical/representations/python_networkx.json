[
    "from webweb import Web\n",
    "import networkx as nx\n",
    "\n",
    "# webweb'll display a metadata attribute as binary if every node's value for\n",
    "# that attribute is either True or False.\n",
    "G = nx.Graph()\n",
    "G.add_edges_from([[0, 1], [1, 2]])\n",
    "\n",
    "G.nodes[0]['cooperativity'] = 'high'\n",
    "G.nodes[0]['alphabeticallity'] = 0\n",
    "\n",
    "G.nodes[1]['cooperativity'] = 'low'\n",
    "G.nodes[1]['alphabeticallity'] = 1\n",
    "\n",
    "G.nodes[2]['cooperativity'] = 'medium'\n",
    "G.nodes[2]['alphabeticallity'] = 2\n",
    "\n",
    "# if the set of a metadata attribute's values contains strings (like\n",
    "# 'cooperativity' here), webweb'll display it as a categorical variable.\n",
    "\n",
    "# if that set contains numbers (like 'alphabeticallity' here), you should tell\n",
    "# webweb how to display it by adding that metadata attribute name to the\n",
    "# `metadataInfo` key to the `display` attribute with an array under\n",
    "# `categories`; a node's value for this metadata attribute should be an index\n",
    "# into this array.\n",
    "web = Web(\n",
    "    nx_G=G,\n",
    "    display={\n",
    "        'metadataInfo' : {\n",
    "            'alphabeticallity' : {\n",
    "                'categories' : ['A-Z', 'a-z', 'W+'],\n",
    "            }\n",
    "        },\n",
    "    }\n",
    ")\n",
    "\n",
    "# we'll compute node color by the `alphabeticallity` metadata attribute\n",
    "# (categorical metadata can't be used to compute node sizes)\n",
    "web.display.colorBy = 'alphabeticallity'\n",
    "\n",
    "# show the visualization\n",
    "web.show()"
]
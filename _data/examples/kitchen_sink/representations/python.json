[
    "from webweb import Web\n",
    "import random\n",
    "\n",
    "# Give the webweb a title.\n",
    "web = Web(title='kitchen_sink')\n",
    "\n",
    "################################################################################\n",
    "# Network 1 of 3: a stochastic block model (SBM)\n",
    "# Features: a network w/ metadata\n",
    "################################################################################\n",
    "\n",
    "# Create an empty edge list, to be populated during network construction\n",
    "edge_list = []\n",
    "\n",
    "# group sizes\n",
    "group_sizes = [15, 20, 25]\n",
    "\n",
    "# probability of edges between groups\n",
    "node_group = [0 for _ in range(group_sizes[0])]\n",
    "node_group += [1 for _ in range(group_sizes[1])] \n",
    "node_group += [2 for _ in range(group_sizes[2])] \n",
    "\n",
    "# group affinity matrix\n",
    "M = [[ 0.25, 0.02, 0    ],\n",
    "     [ 0.02, 0.2,  0.02 ],\n",
    "     [ 0,    0.02, 0.15 ]]\n",
    "\n",
    "# SBM\n",
    "for i in range(sum(group_sizes)):\n",
    "    for j in range(i):\n",
    "        if random.random() < M[node_group[i]][node_group[j]]:\n",
    "            edge_list.append([i,j])\n",
    "\n",
    "# create a network called sbm\n",
    "web.networks.sbm(\n",
    "    # assign its edgelist\n",
    "    adjacency=edge_list,\n",
    "    # give it the community metadata\n",
    "    metadata={'community': \n",
    "        {\n",
    "            'values' : node_group,\n",
    "            # tell webweb to display the groups categorically\n",
    "            'type' : 'categorical',\n",
    "        },\n",
    "    }\n",
    ")\n",
    "\n",
    "################################################################################\n",
    "# Network 2 of 3: the Zachary Karate Club\n",
    "# Feature: a network w/ node names and additional (binary) metadata\n",
    "################################################################################\n",
    "\n",
    "web.networks.zkc(\n",
    "    adjacency=[[2,1],[3,1],[3,2],[4,1],[4,2],[4,3],[5,1],[6,1],[7,1],[7,5],[7,6],[8,1],[8,2],[8,3],[8,4],[9,1],[9,3],[10,3],[11,1],[11,5],[11,6],[12,1],[13,1],[13,4],[14,1],[14,2],[14,3],[14,4],[17,6],[17,7],[18,1],[18,2],[20,1],[20,2],[22,1],[22,2],[26,24],[26,25],[28,3],[28,24],[28,25],[29,3],[30,24],[30,27],[31,2],[31,9],[32,1],[32,25],[32,26],[32,29],[33,3],[33,9],[33,15],[33,16],[33,19],[33,21],[33,23],[33,24],[33,30],[33,31],[33,32],[34,9],[34,10],[34,14],[34,15],[34,16],[34,19],[34,20],[34,21],[34,23],[34,24],[34,27],[34,28],[34,29],[34,30],[34,31],[34,32],[34,33]],\n",
    "    # assign some metadata to nodes by their id\n",
    "    nodes={1 : { 'headHoncho' : True}, 34 : {'headHoncho' : True}},\n",
    "    metadata={\n",
    "        # use the reserved keyword 'name' to give names to nodes for displaying\n",
    "        'name' : {\n",
    "            'values' : [\"Bernita Blizzard\", \"Lauran Lenahan\", \"Kallie Kerr\", \"Yun Yearsley\", \"Krystina Kehr\", \"Marisa Mccullough\", \"Sandra Soderquist\", \"Latisha Luczynski\", \"Gertrudis Guadarrama\", \"Ramonita Raley\", \"Tessa Tuff\", \"Michell Murphey\", \"Juliana Jenny\", \"Imogene Ivie\", \"Ricky Revis\", \"Tonia Tighe\", \"Lyle Lamanna\", \"Michael Motto\", \"Charlie Cartwright\", \"Aimee Aschenbrenner\", \"Vi Vallery\", \"Shaquana Stocking\", \"Penelope Percival\", \"Bari Barrentine\", \"Janie Jeske\", \"Breann Brodie\", \"Carmel Clara\", \"Nada Nicol\", \"Francisca Fu\", \"Shyla Schranz\", \"Clarissa Crooks\", \"Hilario Holzwarth\", \"Huong Hodge\", \"Lavonne Leng\",]\n",
    "        }\n",
    "    }\n",
    ")\n",
    "\n",
    "################################################################################\n",
    "# Network 3 of 3: Tree/Ring network (N-Cayley tree)\n",
    "# Features: a multilayer network with different metadata for each layer\n",
    "################################################################################\n",
    "\n",
    "tree_layers = 4\n",
    "branching_factor = 5\n",
    "\n",
    "nodes_queue = [0]\n",
    "\n",
    "# Create an empty edge list, to be populated during layer construction\n",
    "edge_list = []\n",
    "nodes = {}\n",
    "for tree_layer in range(tree_layers):\n",
    "    new_nodes_queue = []\n",
    "\n",
    "    while len(nodes_queue):\n",
    "        node = nodes_queue.pop(0)\n",
    "        nodes[node] = { 'ring' : tree_layer }\n",
    "        branches = branching_factor if tree_layer == 0 else branching_factor - 1\n",
    "        for _ in range(branches):\n",
    "            new_node = max(nodes.keys()) + 1\n",
    "            edge_list.append([node, new_node])\n",
    "            new_nodes_queue.append(new_node)\n",
    "            nodes[new_node] = { 'ring' : tree_layer + 1 }\n",
    "    \n",
    "    nodes_queue = new_nodes_queue\n",
    "    web.networks.tree.add_layer(adjacency=edge_list, nodes=nodes)\n",
    "\n",
    "# tell webweb to display the metdata categorically\n",
    "web.display.metadata = {\n",
    "    'ring' : {\n",
    "        'type' : 'categorical',\n",
    "    }\n",
    "}\n",
    "\n",
    "################################################################################\n",
    "# Display parameters choices and defaults\n",
    "# Demonstrates: how to set default behavior for webweb on opening the html\n",
    "################################################################################\n",
    "\n",
    "web.display.networkName = 'tree'\n",
    "web.display.networkLayer = 2\n",
    "web.display.colorBy = 'ring'\n",
    "web.display.sizeBy = 'degree'\n",
    "web.display.gravity = .3\n",
    "web.display.charge = 30\n",
    "web.display.linkLength = 15\n",
    "web.display.colorPalette = 'Greens'\n",
    "web.display.scaleLinkOpacity = False\n",
    "web.display.scaleLinkWidth = True\n",
    "\n",
    "# show the visualization\n",
    "web.show()"
]